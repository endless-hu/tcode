#pragma once

#include <fstream>
#include <iostream>
#include <string>
#include <vector>

#include "generators.hh"
#include "item.hh"

/**
 * This class is used to write generated vector<Item> to
 * a txt file. It can also be used to read from a txt file
 * and convert it to a vector<Item>.
 *
 * The format of the txt file is:
 * <dimension> <num_items>
 * <coordinate_1> <coordinate_2> ... <coordinate_dimension>
 * <coordinate_1> <coordinate_2> ... <coordinate_dimension>
 * ... (num_items lines)
 * <coordinate_1> <coordinate_2> ... <coordinate_dimension>
 */
class ReaderWriter {
 public:
  // read from a txt file
  // @return a vector<Item>
  // @out dim: the dimension of the items, if not null
  // @out opt_bins: the optimal number of bins, if not null
  static std::vector<Item> read(std::string file_name, int* dim = nullptr,
                                int* opt_bins = nullptr) {
    std::vector<Item> items;
    std::ifstream file(file_name);
    if (file.is_open()) {
      // The first line could be:
      // 1.  `<dimension> <num_items>` if the case is generated by
      //     RandomGenerator
      // 2.  `<dimension> <num_items> <num_bins>` if the case is generated by
      //     RandomSplitGenerator
      int dimension, num_items;
      file >> dimension >> num_items;
      // Try to read the optimal number of bins at the same line
      int opt_bin;
      if (file.peek() == ' ') {
        file >> opt_bin;
        std::cout << "opt_bin: " << opt_bin << "\n";
        if (opt_bins) {
          *opt_bins = opt_bin;
        }
      }
      if (dim) {
        *dim = dimension;
      }
      for (int i = 0; i < num_items; i++) {
        std::vector<double> vec;
        for (int j = 0; j < dimension; j++) {
          double coordinate;
          file >> coordinate;
          vec.push_back(coordinate);
        }
        items.push_back(Item(vec));
      }
      file.close();
    } else {
      std::cerr << "Unable to open file " << file_name << "\n";
    }
    return items;
  }

  static void write(AbstractGenerator* generator) {
    std::string file_name = generator->name() + ".txt";
    std::ofstream file(file_name, std::ios::app);
    if (file.is_open()) {
      // The first line could be:
      // 1.  `<dimension> <num_items>` if the case is generated by
      //     RandomGenerator
      // 2.  `<dimension> <num_items> <num_bins>` if the case is generated by
      //     RandomSplitGenerator
      file << generator->get_dimension() << " " << generator->get_num_items();
      if (RandomSplitGenerator* gen =
              dynamic_cast<RandomSplitGenerator*>(generator);
          gen != nullptr) {
        file << " " << gen->get_num_bins();
      }
      file << "\n";

      for (auto item : generator->get_items()) {
        for (auto sz : item.get_sizes()) {
          file << sz << " ";
        }
        file << "\n";
      }
      file.close();
    } else {
      std::cerr << "Unable to open file " << file_name << "\n";
    }
  }
};
